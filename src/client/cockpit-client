#!/usr/bin/python3

# This file is part of Cockpit.
#
# Copyright (C) 2018 Red Hat, Inc.
#
# Cockpit is free software; you can redistribute it and/or modify it
# under the terms of the GNU Lesser General Public License as published by
# the Free Software Foundation; either version 2.1 of the License, or
# (at your option) any later version.
#
# Cockpit is distributed in the hope that it will be useful, but
# WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
# Lesser General Public License for more details.
#
# You should have received a copy of the GNU Lesser General Public License
# along with Cockpit; If not, see <http://www.gnu.org/licenses/>.

import gi
import os
import subprocess
import sys
import tempfile

gi.require_version("Gtk", "3.0")  # NOQA
gi.require_version("WebKit2", "4.0")  # NOQA

from gi.repository import Gtk, WebKit2

libexecdir = os.path.realpath(__file__ + '/..')


class CockpitClientWindow(Gtk.ApplicationWindow):
    def __init__(self):
        super().__init__()
        self.set_default_size(1200, 800)
        self.set_size_request(800, 600)

        self.webview = WebKit2.WebView(is_ephemeral=True)
        self.webview.load_uri('http://127.0.90.90:9090/')
        self.webview.get_settings().set_enable_developer_extras(True)
        self.webview.connect('decide-policy', self.decide_policy)
        self.add(self.webview)
        self.webview.show()

        self.set_title("Loading...")  # like login.html
        self.webview.bind_property("title", self, "title")

        self.add_action_entries([
            ('zoom', self.zoom, 's'),
            ('open-inspector', self.open_inspector),
        ])

        self.show()

    def decide_policy(self, view, decision, decision_type):
        if decision_type == WebKit2.PolicyDecisionType.NEW_WINDOW_ACTION:
            uri = decision.get_navigation_action().get_request().get_uri()
            if uri.startswith('http://127.0.90.90'):
                print('XXX: need popout', uri)
            else:
                # We can't get the timestamp from the request, so use Gdk.CURRENT_TIME (== 0)
                Gtk.show_uri_on_window(self, uri, 0)

            decision.ignore()
            return True

        return False

    def zoom(self, action, parameter, *unused):
        current = self.webview.get_zoom_level()
        factors = {'in': current * 1.1, 'default': 1.0, 'out': current * 0.9}
        self.webview.set_zoom_level(factors[parameter.get_string()])

    def open_inspector(self, *unused):
        self.webview.get_inspector().show()


class CockpitClient(Gtk.Application):
    def do_startup(self):
        Gtk.Application.do_startup(self)

        self.set_accels_for_action("win.zoom::in", ["<Primary>equal"])
        self.set_accels_for_action("win.zoom::out", ["<Primary>minus"])
        self.set_accels_for_action("win.zoom::default", ["<Primary>0"])
        self.set_accels_for_action("win.open-inspector", ["<Primary><Shift>i", "F12"])

        context = WebKit2.WebContext.get_default()
        data_manager = context.get_website_data_manager()
        data_manager.set_network_proxy_settings(WebKit2.NetworkProxyMode.NO_PROXY, None)
        context.set_sandbox_enabled(True)

        self.config_dir = write_config()
        env = dict(os.environ, XDG_CONFIG_DIRS=self.config_dir.name)
        cmd = [f'{libexecdir}/cockpit-ws', '--no-tls', '-a', '127.0.90.90']
        self.ws = subprocess.Popen(cmd, env=env)

    def do_activate(self):
        window = CockpitClientWindow()
        window.set_application(self)
        window.present()

    def do_shutdown(self):
        self.ws.kill()
        self.config_dir.cleanup()

        Gtk.Application.do_shutdown(self)


def write_config():
    config_dir = tempfile.TemporaryDirectory()
    os.mkdir(f'{config_dir.name}/cockpit')
    with open(f'{config_dir.name}/cockpit/cockpit.conf', 'x') as cockpit_conf:
        cockpit_conf.write(f'''# dynamically generated by cockpit-client
[WebService]
LoginTitle = Cockpit Client
HideLogin = true
RequireHost = true
LoginTo = true

[Ssh-Login]
ReportStderr = true
Command = {libexecdir}/cockpit-client-ssh
''')

    return config_dir


if __name__ == "__main__":
    app = CockpitClient(application_id=os.getenv('FLATPAK_ID') or 'org.cockpit_project.CockpitClient')
    app.run(sys.argv)
